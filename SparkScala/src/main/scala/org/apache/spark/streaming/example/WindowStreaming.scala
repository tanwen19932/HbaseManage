package org.apache.spark.streaming.example

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming._

/**
	* @author TW
	* @date TW on 2016/12/3.
	*/
object WindowStreaming {
	def main(args: Array[String]): Unit = {
		//    val conf= new SparkConf().setMaster("localhost").setAppName("StreamingExample");
		//    val rdd = new StreamingContext();
		//    if (args.length < 2) {
		//      System.err.println("Usage: NetworkWordCount <hostname> <port>")
		//      System.exit(1)
		//    }
		val mappingFunc = (word: String, one: Option[Int], state: State[Int]) => {
			val sum = one.getOrElse(0) + state.getOption.getOrElse(0)
			val output = (word, sum)
			state.update(sum)
			output
		}
		//    StreamingExamples.setStreamingLogLevels()
		val jarsPath = "/Users/TW/jars/"
		// Create the context with a 1 second batch size
		val sparkConf = new SparkConf()
			.setJars(List(jarsPath + "Streaming.jar"))
			.setAppName("NetworkWordCount")
			.setMaster("spark://localhost:7077")
		val ssc = new StreamingContext(sparkConf, Seconds(10))
		// Create a socket stream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		val lines = ssc.socketTextStream("localhost", 9999, StorageLevel.MEMORY_ONLY_SER)
		ssc.checkpoint(".")
		val words = lines.flatMap(_.split(" "))
		val initialRDD = ssc.sparkContext.parallelize(List(("hello", 1), ("world", 1)))

		val wordDstream = words.map(x => (x, 1))
		val windowedWordCounts = wordDstream.reduceByKeyAndWindow((a: Int, b: Int) => (a + b), Seconds(30), Seconds(10))
		//    普通的wordStream
		//    val wordCounts =wordDstream.reduceByKey(_ + _)
		windowedWordCounts.print()
		//UpdateStateByKey 操作State
		// val stateDstream = wordDstream.mapWithState(
		//StateSpec.function(mappingFunc).initialState(initialRDD))
		//stateDstream.print()
		//wordCounts.saveAsTextFiles("sss", "hahah")
		ssc.start()
		ssc.awaitTermination()
	}
}
